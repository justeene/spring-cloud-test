spring:
  cloud:
    stream:
      bindings:
        es_alarm_input:
          binder: kafka
          destination: es_alarm_topic
          group: es_alarm_group
        es_alarm_output:
          binder: kafka
          destination: es_alarm_topic
        es_default_input:
          binder: kafka
          consumer:
            concurrency: 2
          destination: es_default_topic
          group: es_default_group
        es_default_output:
          binder: kafka
          destination: es_default_topic
      kafka:
        binder:
          brokers: localhost:9092,localhost:9093,localhost:9094
          #0:生产者不会等待broker的ack，这个延迟最低但是存储的保证最弱当server挂掉的时候就会丢数据
          #1：服务端会等待ack值 leader副本确认接收到消息后发送ack但是如果leader挂掉后他不确保是否复制完成新leader也会导致数据丢失
          #-1：同样在1的基础上 服务端会等所有的follower的副本受到数据后才会受到leader发出的ack，这样数据不会丢
          requiredAcks: -1
          zkNodes: localhost:2181
  kafka:
    enabled: false
    #0:生产者不会等待broker的ack，这个延迟最低但是存储的保证最弱当server挂掉的时候就会丢数据
    #1：服务端会等待ack值 leader副本确认接收到消息后发送ack但是如果leader挂掉后他不确保是否复制完成新leader也会导致数据丢失
    #-1：同样在1的基础上 服务端会等所有的follower的副本受到数据后才会受到leader发出的ack，这样数据不会丢
    #  spring.kafka.producer.acks=-1

logging:
  level:
    root: INFO
